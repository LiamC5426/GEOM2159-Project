print('Enter UTM Zone and press enter (for single digit zones, enter 01, 02, 03 etc.)')
UTMEntry = input()
odds = ['01', '03', '05', '07', '09', '11', '13', '15', '17', '19', '21', '23', '25', '27', '29', '31', '33', '35', '37', '39', '41', '43', '45', '47', '49', '51', '53', '55', '57', '59']
evens = ['02', '04', '06', '08', '10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44', '46', '48', '50', '52', '54', '56', '58', '60']
# All UTM Zones sorted into odd and even numbers
# This has been done to assist with coordinate conversion (explained later)

while UTMEntry not in odds and UTMEntry not in evens:
    print('Invalid Entry - please re-enter - remember to use a 0 for single digit zones')
    UTMEntry = input()
# Will produce an error if something other than the numbers above is entered for the UTM Zone

print('Enter Grid Square Designation in capital letters and press enter')
GSDEntry = input()
letters1 = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
letters2 = ['J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R']
letters3 = ['S', 'T', 'U', 'V']
letters4 = ['W', 'X', 'Y', 'Z']
letters5 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',]
numbers1 = ['01', '04', '07', '10', '13', '16', '19', '22', '25', '28', '31', '34', '37', '40', '43', '46', '49', '52', '55', '58']
numbers2 = ['02', '05', '08', '11', '14', '17', '20', '23', '26', '29', '32', '35', '38', '41', '47', '50', '53', '56', '59']
numbers3 = ['03', '06', '09', '12', '15', '18', '21', '24', '27', '30', '33', '36', '39', '42', '45', '48', '51', '54', '57', '60' ]
# Lists containing all letters for Grid Square Designations (GSD) and UTM Zones sorted into groups
# Again, this has been done with regard to calculation of coordinates for conversion
# The letters W, X, Y and Z are together in their own list, as there are no GSDs whose second letter is W, X, Y or Z
# The program requires the GSD entry be entered in captial letters, so a GSD entry containing a letter from the lowercase list (letters5) will not be accepted

# If the given GSD entry satifies any of these statements, it is an invalid GSD entry, and therefore give an error
while len(GSDEntry) != 2 or GSDEntry[1] in letters4 or GSDEntry[0] in letters5 or GSDEntry[1] in letters5:
    print('Invalid Entry - please re-enter - remember to use capital letters!')
    GSDEntry = input()

# Each UTM zone has a certain group of GSDs. Based on the UTM zone entered, only a portion of GSDs are acceptable with the entered UTM zone
# Therefore, If a GSD is entered that is not part of the GSD group belonging to the UTM Zone entered, thw following message will be presented
# The user is also advised how to change UTM Zones if they wish to
while GSDEntry[0] in letters1 and UTMEntry not in numbers1:
    print('Invalid Entry for Specified UTM Zone. To change UTM Zone, restart the kernel and clear outputs')
    GSDEntry = input()
    
while GSDEntry[0] in letters2 and UTMEntry not in numbers2:
    print('Invalid Entry for Specified UTM Zone. To change UTM Zone, restart the kernel and clear outputs')
    GSDEntry = input()
    
while GSDEntry[0] in letters3 and UTMEntry not in numbers3:
    print('Invalid Entry for Specified UTM Zone. To change UTM Zone, restart the kernel and clear outputs')
    GSDEntry = input()
    
while GSDEntry[0] in letters4 and UTMEntry not in numbers3:
    print('Invalid Entry for Specified UTM Zone. To change UTM Zone, restart the kernel and clear outputs')
    GSDEntry = input()

print('Enter 6-digit MGRS Coordinate and press enter')
MGRSEntry = input()
while len(MGRSEntry) != 6:
    print('Invalid Entry - please re-enter')
    
# The first digit of the X UTM coordinate is determined based on the first letter of the GSD (pre-entered)
if GSDEntry[0] == 'A' or GSDEntry[0] == 'J' or GSDEntry[0] == 'S':
    X1 = '1'
elif GSDEntry[0] == 'B' or GSDEntry[0] == 'K' or GSDEntry[0] == 'T':
    X1 = '2'
elif GSDEntry[0] == 'C' or GSDEntry[0] == 'L' or GSDEntry[0] == 'U':
    X1 = '3'
elif GSDEntry[0] == 'D' or GSDEntry[0] == 'M' or GSDEntry[0] == 'V':
    X1 = '4'
elif GSDEntry[0] == 'E' or GSDEntry[0] == 'N' or GSDEntry[0] == 'W':
    X1 = '5'
elif GSDEntry[0] == 'F' or GSDEntry[0] == 'P' or GSDEntry[0] == 'X':
    X1 = '6'
elif GSDEntry[0] == 'G' or GSDEntry[0] == 'Q' or GSDEntry[0] == 'Y':
    X1 = '7'
elif GSDEntry[0] == 'H' or GSDEntry[0] == 'R' or GSDEntry[0] == 'Z':
    X1 = '8'
    
# This block of code takes the first X digit (determined just before), the first three digits of the MGRS coordinate and two zeros on the end
# These three groups of numbers are merged to form the X UTM coordinate
X234 = MGRSEntry[0:3]
X56 = '00'
XFinal = X1 + X234 + X56

# Determination of the Y UTM coordinate is a little more complex
# The first two digits of the Y UYM coordinate are determined by both the second letter of the GSD and the UTM zone entered
# Even with the same second GSD letter, the first two digits of the Y UTM coordinate will be different if the UTM zone is an odd number, compared to an even number
if GSDEntry[1] == 'A' and UTMEntry in odds:
    Y12 = '00'
elif GSDEntry[1] == 'A' and UTMEntry in evens:
    Y12 = '15'
elif GSDEntry[1] == 'B' and UTMEntry in odds:
    Y12 = '01'
elif GSDEntry[1] == 'B' and UTMEntry in evens:
    Y12 = '16'
elif GSDEntry[1] == 'C' and UTMEntry in odds:
    Y12 = '02'
elif GSDEntry[1] == 'C' and UTMEntry in evens:
    Y12 = '17'
elif GSDEntry[1] == 'D' and UTMEntry in odds:
    Y12 = '03'
elif GSDEntry[1] == 'D' and UTMEntry in evens:
    Y12 = '18'
elif GSDEntry[1] == 'E' and UTMEntry in odds:
    Y12 = '04'
elif GSDEntry[1] == 'E' and UTMEntry in evens:
    Y12 = '19'
elif GSDEntry[1] == 'F' and UTMEntry in odds:
    Y12 = '05'
elif GSDEntry[1] == 'F' and UTMEntry in evens:
    Y12 = '00'
elif GSDEntry[1] == 'G' and UTMEntry in odds:
    Y12 = '06'
elif GSDEntry[1] == 'G' and UTMEntry in evens:
    Y12 = '01'
elif GSDEntry[1] == 'H' and UTMEntry in odds:
    Y12 = '07'
elif GSDEntry[1] == 'H' and UTMEntry in evens:
    Y12 = '02'
elif GSDEntry[1] == 'J' and UTMEntry in odds:
    Y12 = '08'
elif GSDEntry[1] == 'J' and UTMEntry in evens:
    Y12 = '03'
elif GSDEntry[1] == 'K' and UTMEntry in odds:
    Y12 = '09'
elif GSDEntry[1] == 'K' and UTMEntry in evens:
    Y12 = '04'
elif GSDEntry[1] == 'L' and UTMEntry in odds:
    Y12 = '10'
elif GSDEntry[1] == 'L' and UTMEntry in evens:
    Y12 = '05'
elif GSDEntry[1] == 'M' and UTMEntry in odds:
    Y12 = '11'
elif GSDEntry[1] == 'M' and UTMEntry in evens:
    Y12 = '06'
elif GSDEntry[1] == 'N' and UTMEntry in odds:
    Y12 = '12'
elif GSDEntry[1] == 'N' and UTMEntry in evens:
    Y12 = '07'
elif GSDEntry[1] == 'P' and UTMEntry in odds:
    Y12 = '13'
elif GSDEntry[1] == 'P' and UTMEntry in evens:
    Y12 = '08'
elif GSDEntry[1] == 'Q' and UTMEntry in odds:
    Y12 = '14'
elif GSDEntry[1] == 'Q' and UTMEntry in evens:
    Y12 = '09'
elif GSDEntry[1] == 'R' and UTMEntry in odds:
    Y12 = '15'
elif GSDEntry[1] == 'R' and UTMEntry in evens:
    Y12 = '10'
elif GSDEntry[1] == 'S' and UTMEntry in odds:
    Y12 = '16'
elif GSDEntry[1] == 'S' and UTMEntry in evens:
    Y12 = '11'
elif GSDEntry[1] == 'T' and UTMEntry in odds:
    Y12 = '17'
elif GSDEntry[1] == 'T' and UTMEntry in evens:
    Y12 = '12'
elif GSDEntry[1] == 'U' and UTMEntry in odds:
    Y12 = '18'
elif GSDEntry[1] == 'U' and UTMEntry in evens:
    Y12 = '13'
elif GSDEntry[1] == 'V' and UTMEntry in odds:
    Y12 = '19'
elif GSDEntry[1] == 'V' and UTMEntry in evens:
    Y12 = '14'

# This is a similar to identical process to the construction of the X UTM coordinate
# Again, this block takes the first two digits of the Y UTM coordinate, the last three digits of the MGRS coordinate and two ending zeros
# All these figures are joined together, forming the Y UTM Coordinate
Y345 = MGRSEntry[3:6]
Y67 = '00'
YFinal = Y12 + Y345 + Y67

# These three lines of code provide a user-friendly finishing message together with the output UTM coordinates
# It implements the X and Y UTM coordinates into a sentence, underneath a confirmation of the UTM zone and GSD that was entered
# As previously done, it also shows the user how to restart and enter new numbers for another conversion
print('UTM Coordinates for', GSDEntry + MGRSEntry + ' in UTM Zone', UTMEntry)
print('(X, Y):', XFinal + ',', YFinal)
print('Restart the kernel and clear outputs for new entries')
